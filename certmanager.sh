#!/bin/bash

if [ "$(id -u)" != "0" ]; then
	echo ""
	echo "'certmanager' must be run as root. Exiting . . ."
	echo ""
	exit 1
fi

#*****************************************************************************************

#*****************************************************************************************

function mainMenu {
clear
errorLoop=0
touch /tmp/keystorelist.txt
ls /srv/jssgrabber/keystores/ > /tmp/keystorelist.txt
TomcatCertFingerprint=$(sudo keytool -list -alias tomcat -storepass "grabberPass" -keystore /var/lib/tomcat7/keystore.jks | grep "Certificate fingerprint")

echo ""
echo "================================================================================"
echo "| Your VM's Certificate Manager                                                |"
echo "|==============================================================================|"
echo "|  Active?  |  Associated JSS Context                      |  Context Exists?  |"
echo "|===========|==============================================|===================|"

while read jssContextName; do
	JSSCertFingerprint=$(sudo keytool -list -alias tomcat -storepass "grabberPass" -keystore /srv/jssgrabber/keystores/"${jssContextName}"/keystore.jks | grep "Certificate fingerprint")

	if [ "${TomcatCertFingerprint}" == "${JSSCertFingerprint}" ]; then
		listActive="|   *Yes*   |"
	else
		listActive="|           |"
	fi

	listContext=" "$(printf "%-45s" "${jssContextName}")"|"

	if [ -d /var/lib/tomcat7/webapps/"${jssContextName}"/ ]; then
		listExists="        Yes        |"
	else
		listExists="        No         |"
	fi

	echo "${listActive}${listContext}${listExists}"
	echo "| - - - - - | - - - - - - - - - - - - - - - - - - - - - - -| - - - - - - - - - |"
done < /tmp/keystorelist.txt

rm /tmp/keystorelist.txt
echo "================================================================================"
read -sp "| Press [ENTER] to continue . . .                                              |"
echo ""
echo "================================================================================"

echo ""
showMenu () {
	echo "================================================================================"
	echo "| Please select an option:                                                     |"
	echo "|==============================================================================|"
	echo "| 1) Set the active JSS Web Certificate                                        |"
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - |"
	echo "| 2) Create a Web Certificate for a JSS Context                                |"
	echo "| 3) Delete a Web Certificate for a JSS Context                                |"
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - |"
	echo "| X) Exit the Certificate Manager                                              |"
	echo "|==============================================================================="
}
while [ 1 ]
do
	showMenu
	read -p "| Your selection: " CHOICE
	case "$CHOICE" in
		"1") setJSSWebCert; break;;
		"2") createJSSWebCert; break;;
		"3") deleteJSSWebCert; break;;
		"x" | "X") EXITSCRIPT; break;;
	esac
done
mainMenu
}

#*****************************************************************************************

function EXITSCRIPT {
exit 0
}

#*****************************************************************************************

function setJSSWebCert {
selectJSSContext
if [ ! -d /srv/jssgrabber/keystores/"${WEBAPP}"/ ]; then
	echo "|-------------------------------------------------------------------------------"
	echo "| This context does not have a keystore generated by Certificate Manager." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	echo "| You will be returned to the Main Menu..." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	read -sp "| Press [ENTER] to continue..."
	echo ""
	break
fi
setActiveWebCert
}

#*****************************************************************************************

function createJSSWebCert {
selectJSSContext
if [ -d /srv/jssgrabber/keystores/"${WEBAPP}"/ ]; then
	echo ""
	echo "This JSS context already has a saved 'keystore.jks'. If you wish to create a"
	echo "new one new, first delete the existing copy from the Main Menu."
	break
fi

mkdir -p /srv/jssgrabber/keystores/"${WEBAPP}"

echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
echo "| Creating the JSS keystore.jks . . ."
hostnameCurrent=$(hostname)
keytool -genkey -alias tomcat -keystore /srv/jssgrabber/keystores/"${WEBAPP}"/keystore.jks -storepass "grabberPass" -keyalg RSA -keypass "grabberPass" -dname "CN=${hostnameCurrent}.local, OU=JAMFSW, O=JAMF Software, L=Minneapolis, ST=MN,C=US"
echo "| Creating a Certificate Signing Request (CSR) from the keystore.jks . . ."
keytool -certreq -alias tomcat -keystore /srv/jssgrabber/keystores/"${WEBAPP}"/keystore.jks -storepass "grabberPass" -keypass "grabberPass" -keyalg RSA -file /srv/jssgrabber/keystores/"${WEBAPP}"/certreq.csr

createJSSWebCert_MacConnect

echo "| Copying the CSR to your '/Users/Shared/' directory . . ."
sshpass -p "${sshPassword}" ssh "${sshUserName}"@"${sshMacName}" "mkdir /Users/Shared/${WEBAPP}/"
sshpass -p "${sshPassword}" scp /srv/jssgrabber/keystores/"${WEBAPP}"/certreq.csr "${sshUserName}"@"${sshMacName}":/Users/Shared/${WEBAPP}/certreq.txt
sshpass -p "${sshPassword}" ssh "${sshUserName}"@"${sshMacName}" "open /Users/Shared/${WEBAPP}/"

echo "|-------------------------------------------------------------------------------"
echo "| The CSR has been copied to the Mac."
echo "| 1) Open a web browser and navigate to 'http://yourjss/ca.html'."
echo "| 2) Download your CA Certificate and name it 'ca.pem'."
echo "| 3) Create a Web Certificate using the CSR text and name it 'webcert.pem'."
echo "| 4) Copy those certificates to the open '/Users/Shared/${WEBAPP}/' directory."
echo "| Once the above steps have been completed press the [ENTER] key..."
echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
echo "| IMPORTANT: Do not mix up the two certificates when they are created!"
echo "|-------------------------------------------------------------------------------"

createJSSWebCert_FileCheck

echo "|-------------------------------------------------------------------------------"
echo "| Copying the 'ca.pem' and 'webcert.pem' files into the JSSGrabber VM . . ."
sshpass -p "${sshPassword}" scp "${sshUserName}"@"${sshMacName}":/Users/Shared/"${WEBAPP}"/ca.pem /srv/jssgrabber/keystores/"${WEBAPP}"/ca.pem
sshpass -p "${sshPassword}" scp "${sshUserName}"@"${sshMacName}":/Users/Shared/"${WEBAPP}"/webcert.pem /srv/jssgrabber/keystores/"${WEBAPP}"/webcert.pem
sshpass -p "${sshPassword}" ssh "${sshUserName}"@"${sshMacName}" "rm -rf /Users/Shared/${WEBAPP}/"

echo "| Importing ca.pem and the webcert.pem into the keystore.jks . . ."
echo -e "y\n" | keytool -import -file /srv/jssgrabber/keystores/"${WEBAPP}"/ca.pem -alias root -keystore /srv/jssgrabber/keystores/"${WEBAPP}"/keystore.jks -storepass "grabberPass" -trustcacerts 1> /dev/null
keytool -import -file /srv/jssgrabber/keystores/"${WEBAPP}"/webcert.pem -alias tomcat -keystore /srv/jssgrabber/keystores/"${WEBAPP}"/keystore.jks -storepass "grabberPass" -keypass "grabberPass" -trustcacerts 1> /dev/null

echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
echo "| You have created a keystore with a signed certificate."
echo "|-------------------------------------------------------------------------------"
echo "| Do you wish to make this the active certificate for the server?"
showMenu () {
	echo "| 1) Yes, make this the active certificate."
	echo "| 2) No, do not make this the active certificate."
}
while [ 1 ]
do
	showMenu
	read -p "| Your selection: " CHOICE
	case "$CHOICE" in
		"1") setActiveWebCert; break;;
		"2") break;;
	esac
done
}

#*****************************************************************************************

function selectJSSContext {
if [ $errorLoop -eq 3 ]; then
	echo "|-------------------------------------------------------------------------------"
	echo "| You have made three invalid inputs.  You will be returned to the Main Menu..." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	read -sp "| Press [ENTER] to continue..."
	echo ""
	break
fi
echo "|-------------------------------------------------------------------------------"
echo "|Enter the name of the JSS context."
echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
read -p "| (For example: 'ROOT' or 'jss'): " WEBAPP
if [ ! -d /var/lib/tomcat7/webapps/"${WEBAPP}"/ ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| You have entered an incorrect JSS context name. Please try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	errorLoop=$((errorLoop+1))
	selectJSSContext
elif [ -z "${WEBAPP}" ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| You cannot enter a blank value for the JSS context. Please try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	errorLoop=$((errorLoop+1))
	selectJSSContext
fi
}

#*****************************************************************************************

function selectJSSContext_Delete {
if [ $errorLoop -eq 3 ]; then
	echo "|-------------------------------------------------------------------------------"
	echo "| You have made three invalid inputs.  You will be returned to the Main Menu..." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	read -sp "| Press [ENTER] to continue..."
	echo ""
	break
fi
echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
echo "|Enter the name of the JSS context."
echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
read -p "| (For example: 'ROOT' or 'jss'): " WEBAPP
if [ ! -d /srv/jssgrabber/keystores/"${WEBAPP}"/ ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| You have entered an incorrect JSS context name. Please try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	errorLoop=$((errorLoop+1))
	selectJSSContext_Delete
elif [ -z "${WEBAPP}" ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| You cannot enter a blank value for the JSS context. Please try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	errorLoop=$((errorLoop+1))
	selectJSSContext_Delete
fi
}

#*****************************************************************************************

function createJSSWebCert_MacConnect {
if [ $errorLoop -eq 3 ]; then
	echo "|-------------------------------------------------------------------------------"
	echo "| You are unable to establish a connection to your Mac. Verify that in your" | tee -a /srv/jssgrabber/logs/jssgrabber.log
	echo "| 'System Preferences > Sharing' that 'Remote Login' is enabled and try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -" | tee -a /srv/jssgrabber/logs/jssgrabber.log
	echo "| You will be returned to the Main Menu..." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	read -sp "| Press [ENTER] to continue..."
	echo ""
	break
fi
echo "|-------------------------------------------------------------------------------"
echo "| The next steps in this process must be done on your Mac. The VM will handle"
echo "| copying files back and forth between the two systems. Below you will be"
echo "| prompted to enter login information for your Mac."
echo "|-------------------------------------------------------------------------------"
echo "| Please enter the following information for SSH connections:"
echo "|-------------------------------------------------------------------------------"
read -p "| Mac's Hostname: " sshMacName
read -p "| Mac's Username: " sshUserName
read -sp "| User Password: " sshPassword
echo ""
sshpass -p "${sshPassword}" ssh -o StrictHostKeyChecking=no "${sshUserName}"@"${sshMacName}" "echo" 2> /dev/null

if [ $? -ne 0 ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| Authentication check was unsuccessful. Please try again." | tee -a /srv/jssgrabber/logs/jssgrabber.log
	errorLoop=$((errorLoop+1))
	createJSSWebCert_MacConnect
fi
}

#*****************************************************************************************

function createJSSWebCert_FileCheck {
read -sp "| Press [ENTER] to continue . . . "
echo ""
echo "|"
sshpass -p "${sshPassword}" ssh "${sshUserName}"@"${sshMacName}" "test -e /Users/Shared/${WEBAPP}/ca.pem"
if [ $? -ne 0 ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| The file 'ca.pem' has not been placed in '/Users/Shared/${WEBAPP}/'"
	echo "| Please copy the file with the correct name into the directory."
	createJSSWebCert_FileCheck
fi
sshpass -p "${sshPassword}" ssh "${sshUserName}"@"${sshMacName}" "test -e /Users/Shared/${WEBAPP}/webcert.pem"
if [ $? -ne 0 ]; then
	echo "| -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"
	echo "| The file 'webcert.pem' has not been placed in '/Users/Shared/${WEBAPP}/'"
	echo "| Please copy the file with the correct name into the directory."
	createJSSWebCert_FileCheck
fi
}

#*****************************************************************************************

function setActiveWebCert {
echo ""
service tomcat7 stop
if [ -e /var/lib/tomcat7/keystore.jks ]; then
	echo ""
	echo "Removing the existing 'keystore.jks' from Tomcat . . ."
	rm /var/lib/tomcat7/keystore.jks
fi
echo ""
echo "Loading the new 'keystore.jks' into Tomcat . . ."
cp /srv/jssgrabber/keystores/"${WEBAPP}"/keystore.jks /var/lib/tomcat7/keystore.jks
echo ""
service tomcat7 start
echo ""
echo "The new 'keystore.jks' has been loaded."
}

#*****************************************************************************************

function deleteJSSWebCert {
selectJSSContext_Delete
JSSCertFingerprint=$(sudo keytool -list -alias tomcat -storepass "grabberPass" -keystore /srv/jssgrabber/keystores/"${jssContextName}"/keystore.jks | grep "Certificate fingerprint")
TomcatCertFingerprint=$(sudo keytool -list -alias tomcat -storepass "grabberPass" -keystore /var/lib/tomcat7/keystore.jks | grep "Certificate fingerprint")
if [ "${TomcatCertFingerprint}" == "${JSSCertFingerprint}" ]; then
	echo ""
	echo "The JSS context certificate you have selected is currently the active certificate"
	echo "in use by Tomcat. It will remain so until you assign a new one from the Main Menu."
fi
echo ""
echo "WARNING: You cannot undo this action. Do you still wish to proceed?"
read -p "Yes/No: " CHOICE
case "$CHOICE" in
		"y"|"Y"|"YES"|"Yes"|"yes") ;;
		"n"|"N"|"NO"|"No"|"no") echo "User has cancelled deletion."; break;;
esac
echo ""
echo "Removing the '${WEBAPP}' certificate files . . ."
rm -rf /srv/jssgrabber/keystores/"${WEBAPP}"/
echo "Done."
}

mainMenu
exit 0